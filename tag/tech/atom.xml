<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | Thijs Lensselink's Blog]]></title>
  <link href="http://blog.lenss.nl/tag/tech/atom.xml" rel="self"/>
  <link href="http://blog.lenss.nl/"/>
  <updated>2015-07-17T17:12:47+02:00</updated>
  <id>http://blog.lenss.nl/</id>
  <author>
    <name><![CDATA[Thijs Lensselink]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git shell tools]]></title>
    <link href="http://blog.lenss.nl/2015/05/git-shell-tools/"/>
    <updated>2015-05-06T15:26:04+02:00</updated>
    <id>http://blog.lenss.nl/2015/05/git-shell-tools</id>
    <content type="html"><![CDATA[<p>Although i work in a nice and fancy IDE with all bells and whistles i ever need. I still do a lot of my day to day work in a shell. One of those things is working with Git. </p>

<p>To make git more fun to work with on the command-line. There are a couple of things i did.</p>

<p>Let’s start with auto-complete. It’s great to be able to tab complete branch names, remote files and tree and file paths. To make this happen we only need to download the following bash script from the people at Github.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ cd ~/bin
$ wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
</pre></div>
</div>
 </figure></notextile></div></p>

<p>And to make this work in your shell add this to your .bashrc or .bash_profile</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ vi .bash_profile
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>git-completion </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
if [ -f ~/bin/git-completion.bash ]; then
    source ~/bin/git-completion.bash
fi
</pre></div>
</div>
 </figure></notextile></div></p>

<p>The only thing we need to do to make TAB completion work is reload the bash profile. We can do this by sourcing the file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ source ~/.bash_profile
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Another fancy addition to working with git in a shell environment is something my coworkers showed me. It’s called the git-prompt. And is also created by the people at Github.</p>

<p>This script will do a couple of things. One of them is displaying which the current working branch is. More visible enhancements are possible by populating certain variables. </p>

<p><strong>GIT_PS1_SHOWDIRTYSTATE</strong>
Use the ‘*’ and ‘+’ characters to display unstaged and staged changes</p>

<p><strong>GIT_PS1_SHOWSTASHSTATE</strong>
Use ‘$’ to display stashed changes</p>

<p><strong>GIT_PS1_SHOWUNTRACKEDFILES</strong>
Will use ‘%’ to display there are untracked files</p>

<p>And more settings are possible. Check the readme at the beginning of the script for this. But what the script actually does is use the shells PS1 variable to display previously mentioned visible enhancements.</p>

<p>So let’s start by fetching the actual script</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ cd ~/bin
$ wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now that we have the script in place. Lets update the bash profile</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>git-prompt </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
if [ -f ~/bin/git-prompt.sh ]; then
   source ~/bin/git-prompt.sh
   GIT_PS1_SHOWDIRTYSTATE=true
   GIT_PS1_SHOWCOLORHINTS=true
   GIT_PS1_UNTRACKEDFILES=true
   export PS1=’[\e[31;1m]\u[\e[0m][\e[37;1m]@[\e[0m][\e[36;1m]\h[\e[0m]$(__git_ps1 “ [\e[32;1m][%s][\e[0m]”) [\e[37;1m]$[\e[0m] ‘ 
fi
</pre></div>
</div>
 </figure></notextile></div></p>

<p>In this case my PS1 is a bit more fancy because of the added colors. But the magic comes from adding</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>__git_ps1 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
$(__git_ps1 “[%s]”)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>When the profile is sourced once again. You can see what happens when we move to a repository</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ cd path/to/git/repository
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>PS1 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
username@hostname [branch-name *] $
</pre></div>
</div>
 </figure></notextile></div></p>

<p>The scripts used in this post can be found in this repository https://github.com/git/git/tree/master/contrib/completion</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Composer on Git clone]]></title>
    <link href="http://blog.lenss.nl/2015/02/composer-install-on-git-clone/"/>
    <updated>2015-02-27T12:46:22+01:00</updated>
    <id>http://blog.lenss.nl/2015/02/composer-install-on-git-clone</id>
    <content type="html"><![CDATA[<p>I work on a couple of projects that use <a href="https://getcomposer.org/">Composer</a> to manage the dependencies. And a coworker asked if it was possible to automate running <code>composer install</code> after cloning a repo. It sounded like a good idea. As i sometimes forget to run the command myself. So i did some research. And it turned out to be quite easy.</p>

<p>To makee this work we will be using <a href="http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git hooks</a> together with Git templates.</p>

<p>So we start by creating a templates folder for git. Where does not matter.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ mkdir -p [full path]/git-templates/hooks
</pre></div>
</div>
 </figure></notextile></div></p>

<p>When that’s done. we need to tell git to use the template folder on each clone / checkout. We can do this by setting a global alias for clone</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git config –global alias.clone ‘clone –template=[full path]/git-templates’
</pre></div>
</div>
 </figure></notextile></div></p>

<p>You can also do this by manually editing the .gitconfig file</p>

<p><blockquote><p>[alias]<br/>	clone = clone –template=[full path]/git-templates</p></blockquote></p>

<p>So now we have a template folder that’s read on every clone / checkout. We only need to create the hook script that triggers composer.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ vi [full path]/hooks/post-checkout
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>composer_run </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
#! /bin/bash
# Check if a composer.json file is present
function composer_run() {
    REPO=$(readlink -m $(dirname .))
    if [ -f $REPO/composer.json ]; then
        composer install
    fi
}&lt;/p&gt;

&lt;p&gt;composer_run
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Finally wer need to make it executable</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ chmod +x [full path]/hooks/post-checkout
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Let’s test it by cloning a test repo</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git clone git@github.host.tld:user/composer-hook.git foo
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Cloning into foo…<br/>remote: Counting objects: 21, done.<br/>remote: Compressing objects: 100% (15/15), done.<br/>remote: Total 21 (delta 5), reused 14 (delta 1)<br/>Receiving objects: 100% (21/21), done.<br/>Resolving deltas: 100% (5/5), done.<br/>Loading composer repositories with package information<br/>Installing dependencies (including require-dev)<br/>  - Installing psr/log (1.0.0)<br/>    Loading from cache</p></p><p><ul><br/>  <li>Installing monolog/monolog (1.12.0)<br/>Loading from cache</li><br/></ul></p><p><p>…</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress blog hijacked]]></title>
    <link href="http://blog.lenss.nl/2015/02/octopress-blog-hijacked-by-javascript/"/>
    <updated>2015-02-06T15:46:53+01:00</updated>
    <id>http://blog.lenss.nl/2015/02/octopress-blog-hijacked-by-javascript</id>
    <content type="html"><![CDATA[<p>I use <a href="http://octopress.org/">Octopress</a> to write and generate my blog. Which works pretty well most of the time. The main benefit is having a statically generated website. No database connections no code overhead. Just plain and simple text. You’d pretty much have to 0wn the server to get to the files.</p>

<p>To my surprise though my blog was redirecting to http://octophile.com when i check my blog status today. That was pretty weird. So the first thing i did was check my commit logs. No changes. <a href="https://github.com/">Github</a> didn’t get owned (at least not publicly known). So what could be redirecting my site?</p>

<p>So i grepped for the domain name i was redirected to.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ grep -r ‘octophile’ *
</pre></div>
</div>
 </figure></notextile></div></p>

<p>All generated pages had a call to <a href="http://octophile.com/widgets.js">http://octophile.com/widgets.js</a>. This came from the main layout template. And was there from the start. So what was it for. I just couldn’t remember. But a quick Google search turned up the Github <a href="https://github.com/mdellanoce/octophile">project</a> page. It’s the twitter widget i used for a while. Still weird though. So let’s check the contents of the widget.js file</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>redirect </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> redir_url = <span class="error">‘</span>http:<span class="comment">//octophile.com/’; if (window != top) { top.location.href = redir_url; } else { window.location = redir_url; }</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>OK that explains the redirect. Now let’s take a look the WHOIS data for the octophile domain</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
   Domain Name: OCTOPHILE.COM
   Registrar: DOMAINTIMEMACHINE.COM LLC
   Sponsoring Registrar IANA ID: 1200
   Whois Server: whois.domaintimemachine.com
   Referral URL: http://www.networksolutions.com
   Name Server: 70222-NS1.NDOVERDRIVE.COM
   Name Server: 70222-NS2.NDOVERDRIVE.COM
   Status: clientTransferProhibited http://www.icann.org/epp#clientTransferProhibited
   Updated Date: 05-feb-2015
   Creation Date: 30-jan-2014
   Expiration Date: 30-jan-2016
</pre></div>
</div>
 </figure></notextile></div></p>

<p>So the DNS was changed yesterday. It might be somebody hijacked the domain. But i’m not sure. Maybe the project is just discontinued. Whatever it is. It was fun to figure out what was going on. I contacted the owner of the widget. But haven’t received a reply yet.</p>

<p><strong>UPDATE</strong></p>

<p>I got a quick response from the project owner. He stopped working on it a long time ago. And i probably should have cleaned up my templates. Good thing no evil javascript was injected :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory exhaust issue PHP and APM]]></title>
    <link href="http://blog.lenss.nl/2013/07/memory-exhaust-issue-PHP-and-APM/"/>
    <updated>2013-07-03T11:57:43+02:00</updated>
    <id>http://blog.lenss.nl/2013/07/memory-exhaust-issue-PHP-and-APM</id>
    <content type="html"><![CDATA[<p>A while back i wrote a small data aggregator that would do some background processing and populate a database with it’s calculated results. The main reason to implement this was that running the queries in real-time on the production server was causing memory exhaust issues. Once the new feature was done and deployed. We quickly noticed we were running into the same kind of issues again. And the script would halt almost each time it was executed.</p>

<p><blockquote><p>Fatal error: Allowed memory size of xxxxxxxxx bytes exhausted (tried toallocate xxxxx bytes) in</p></blockquote></p>

<p>After some hacking and optimization tricks. The script’s memory consumption seemed stable enough to deploy it to production. However. Each time we deployed it. We were hit by memory exhaust issues almost instantly. Time to do some debugging and code tracing.</p>

<p>And we’re able to narrow it down to a single mysql<em>* (don’t get me started on the mysql</em>* functions, so let’s ignore that for now) call. Namely  <a href="http://php.net/manual/en/function.mysql-fetch-field.php">mysql_fetch_field</a>. Why on earth would this generate a memory exhaust issue on the server you might think. And that’s exactly what we were thinking. </p>

<p>The problem was. That the offset passed in as the field offset was incorrect. And resulted in a notice. These notices however were suppressed with the @ symbol. And therefor never noticeable during development. But that’s no reason for memory exhaust issues… right?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
@mysql_fetch_field($result, $offset);
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Right! Further inspection showed that in production PHP’s <a href="http://code.google.com/p/peclapm/">APM</a> extension was loaded and active. And this was the real problem behind the memory exhaust issue. Thousands of queries were executed. And almost all of them were throwing an error notice for the fetch field function. Which was ignored by the @ symbol. But APM was still logging them. And apparently had a very hard time keeping up. </p>

<p>It looks like a bug in APM. But that’s another story. The issue was fixed by passing in the correct offset of course. Another nice example of logging bringing down a production server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 5.5.0 released]]></title>
    <link href="http://blog.lenss.nl/2013/06/php-55-released/"/>
    <updated>2013-06-22T21:56:12+02:00</updated>
    <id>http://blog.lenss.nl/2013/06/php-55-released</id>
    <content type="html"><![CDATA[<p>PHP reached a new milestone 3 days ago. And as always it’s quite exciting news. Some of the new features are already outlined by Evert Pot’s post which you can find <a href="http://evertpot.com/php-55-released/">here</a>. And all of this of course can be found on the <a href="https://wiki.php.net/rfc">wiki</a> and in the <a href="http://php.net/ChangeLog-5.php#5.5.0">change log</a>. </p>

<p>I’ll just outline some of the new and exiting features, deprecated notices and removed functions.</p>

<p><strong><em>Simplified password hashing API</em></strong></p>

<p>Hashing passwords with <a href="http://php.net/manual/en/function.md5.php">md5()</a> and <a href="http://php.net/manual/en/function.sha1.php">sha1()</a> just isn’t enough anymore. So a new, secure and easy way to hash passwords has been added. And besides hashing includes some other useful functions.</p>

<p><strong><em>$password</em></strong> The password string to hash</p>

<p><strong><em>$algorithm</em></strong> The hashing algorithm to use of which two are available at the moment</p>

<p><blockquote><p>PASSWORD_DEFAULT which uses bcrypt<br/>PASSWORD_BCRYPT which uses blowfish</p></blockquote></p>

<p><strong><em>$options</em></strong> makes it possible to add a salt or set the cost for the hashing algorithm</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Hash password with default algorithm</span><a href='http://php.net/manual/en/function.password-hash.php'>password_hash() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$password</span> = ‘test-password’;
<span class="local-variable">$hash</span> = password_hash(<span class="local-variable">$password</span>, <span class="constant">PASSWORD_DEFAULT</span>);
<span class="predefined">var_dump</span>(<span class="local-variable">$hash</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
string(60) “$2y$10$qGv1q5nT4F7HCtKSPPME2usrdJRcRpk9lEUMQsE8mqyDIy3fbJ4I.”
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Hash password with BLOWFISH algorithm</span><a href='http://php.net/manual/en/function.password-hash.php'>password_hash() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$hash</span> = password_hash(<span class="local-variable">$password</span>, <span class="constant">PASSWORD_BCRYPT</span>);
<span class="predefined">var_dump</span>(<span class="local-variable">$hash</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
string(60) “$2y$10$XtpNO/tFjtkq4u3ghcpqXeSwbHZxDQDTXRHfWBnZsmowUVl/MQys2”
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Hash password with BLOWFISH algorithm and options</span><a href='http://php.net/manual/en/function.password-hash.php'>password_hash() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$salt</span> = mcrypt_create_iv(<span class="integer">22</span>, <span class="constant">MCRYPT_DEV_URANDOM</span>); 
<span class="local-variable">$hash</span> = password_hash(<span class="local-variable">$password</span>, <span class="constant">PASSWORD_BCRYPT</span>, <span class="predefined">array</span>(“cost” =&amp;gt; <span class="integer">14</span>, “salt” =&amp;gt; <span class="local-variable">$salt</span>));
<span class="predefined">var_dump</span>(<span class="local-variable">$hash</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
string(60) “$2y$14$6ZtnYJ0CyqCUx.vJu3MZEuUGgIN.ryxMa0Yh8BnCrbBDVnd3Me30i”
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Verify if a hash and password match. Return true if they do and false if they don’t</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Verify hash</span><a href='http://php.net/manual/en/function.password-verify.php'>password_verify() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
$hash = password_hash($password, PASSWORD_DEFAULT);<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>if (password_verify($password, $hash)) {
  echo ‘Password is correct’;
} else {
  echo ‘Password is incorrect’;
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Password is correct
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Get information about a valid hash created with password_hash(). The function returns an array with the use d algorithm and options</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Retrieve $hash information</span><a href='http://php.net/manual/en/function.password-get-info.php'>password_get_info() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$info</span> = password_get_info(<span class="local-variable">$hash</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
array(3) {
  [“algo”]=&amp;gt;
  int(1)
  [“algoName”]=&amp;gt;
  string(6) “bcrypt”
  [“options”]=&amp;gt;
  array(1) {
    [“cost”]=&amp;gt;
    int(10)
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Check if the supplied hash was generated by the provided algorithm and options. This might come in handy when the hash needs to be updated</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Check if a $hash needs to be rehashed</span><a href='http://php.net/manual/en/function.password-needs-rehash.php'>password_needs_rehash() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">if</span> (password_needs_rehash(<span class="local-variable">$hash</span>, <span class="constant">PASSWORD_BCRYPT</span>, <span class="predefined">array</span>(‘cost’ =&amp;gt; <span class="integer">8</span>))) {
  <span class="comment">// Update the password hash</span>
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Support for constant array/string dereferencing</em></strong></p>

<p>If you work with objects you might have worked with object dereferencing. This Is used to chain method calls. Or the so called fluent interfaces</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Dereference object call </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$obj</span>-&amp;gt;method()-&amp;gt;returnObjMethod();
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now the same is possible for arrays and strings</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Dereference strings / array </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
echo array(1, 2, 3)[0]; //output 1
echo “foobar”[2]; //output o
echo “foobar”[“foo”][0] // output f<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>echo [1,3,4][2]; //output 4
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Class Name Resolution As Scalar Via “class” Keyword</em></strong></p>

<p>An easy way to get the full class name </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Class name resolution via ::class </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
namespace Vodka\Crypt;<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>Class HashBuilder {}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>use Vodka\Crypt\HashBuilder;<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>var_dump(HashBuilder::class);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
string(23) “Vodka\Crypt\HashBuilder”
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Support for using empty() on the result of function calls and other expressions</em></strong></p>

<p>Normally <a href="http://php.net/manual/en/function.empty.php">empty()</a> and <a href="http://php.net/manual/en/function.isset.php">isset()</a> could only be used on variables. In 5.5 it’s possible to test expression and return values from functions</p>

<p><strong><em>5.3</em></strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Call empty() with closure </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="predefined">var_dump</span>( <span class="predefined">empty</span>(<span class="keyword">function</span>() {}) );
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>PHP Parse error:  syntax error, unexpected T_FUNCTION in</p></blockquote></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Call empty() with function return value </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>        
<span class="keyword">function</span> <span class="function">foo</span>() {}
<span class="predefined">var_dump</span>(<span class="predefined">empty</span>(foo()));
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>PHP Fatal error:  Can’t use function return value in write context in</p></blockquote></p>

<p><strong><em>5.5</em></strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Call empty() with function return value </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
function foo($val) { 
  return $val; 
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>var_dump( empty(foo([])) );
var_dump( empty(foo(true)) );
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
bool(true)
bool(false)
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Support for list in foreach</em></strong></p>

<p>List has been added for foreach loops. Great for eliminating unused variables.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Support for list in foreach </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
$messages = array(
  array(‘id’ =<span class="entity">&amp;gt;</span> 1, ‘body’ =<span class="entity">&amp;gt;</span> ‘test-1’, ‘code’ =<span class="entity">&amp;gt;</span> 12),
  array(‘id’ =<span class="entity">&amp;gt;</span> 2, ‘body’ =<span class="entity">&amp;gt;</span> ‘test-2’, ‘code’ =<span class="entity">&amp;gt;</span> 12),
  array(‘id’ =<span class="entity">&amp;gt;</span> 3, ‘body’ =<span class="entity">&amp;gt;</span> ‘test-3’, ‘code’ =<span class="entity">&amp;gt;</span> 10)
);<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Before
foreach ($messages as $message) {
  list($id, $body) = $message;
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// After
foreach ($messages as list($id, $body)) {}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Zend Opcache extension and enable building it by default</em></strong></p>

<p>My short post about <a href="https://wiki.php.net/rfc/optimizerplus">Zend Optimizer+</a> in February this year. Kind of slipped my mind. And i was somehow under the impression <a href="http://pecl.php.net/package/APC">APC</a> would be integrated. But this of course has to be Zend Optimizer+. Finally an opcode cacher available be default. And configurable from php.ini</p>

<p><blockquote><p>[opcache]<br/>; Determines if Zend OPCache is enabled<br/>opcache.enable=0<br/>opcache.enable_cli=0</p></p><p><p>; The OPcache shared memory storage size.<br/>opcache.memory_consumption=64</p></p><p><p>; The amount of memory for interned strings in Mbytes.<br/>opcache.interned_strings_buffer=4</p></p><p><p>; Max files in OPCode cache, use a number between 200 and 100000.<br/>opcache.max_accelerated_files=2000</p></p><p><p>; The maximum percentage of “wasted” memory until a restart is scheduled.<br/>opcache.max_wasted_percentage=5</p></p><p><p>; Append current working dir to script name<br/>opcache.use_cwd=1</p></p><p><p>How often a file should be validated<br/>opcache.revalidate_freq=2</p></p><p><p>; Enables or disables file search in include_path optimization<br/>opcache.revalidate_path=0</p></p><p><p>; Drop all PHPDoc comments<br/>opcache.save_comments=1</p></blockquote></p>

<p><strong><em>array_column function which returns a column in a multidimensional array</em></strong></p>

<p>Fetching a column from a multi-dimensional array is now possible with a single function call.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Fetch a column from a multi-dimensional array</span><a href='http://php.net/manual/en/function.array-column.php'>array_column() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$nestedArray</span> = <span class="predefined">array</span>(
  <span class="predefined">array</span>(‘id’ =&amp;gt; <span class="integer">1</span>, ‘body’ =&amp;gt; ‘test-<span class="integer">1</span>’, ‘code’ =&amp;gt; <span class="integer">12</span>),
  <span class="predefined">array</span>(‘id’ =&amp;gt; <span class="integer">2</span>, ‘body’ =&amp;gt; ‘test-<span class="integer">2</span>’, ‘code’ =&amp;gt; <span class="integer">12</span>),
  <span class="predefined">array</span>(‘id’ =&amp;gt; <span class="integer">3</span>, ‘body’ =&amp;gt; ‘test-<span class="integer">3</span>’, ‘code’ =&amp;gt; <span class="integer">10</span>)
);
<span class="local-variable">$columns</span> = array_column(<span class="local-variable">$nestedArray</span>, ‘code’);
<span class="predefined">print_r</span>(<span class="local-variable">$columns</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Array
(
  [0] =&amp;gt; 12
  [1] =&amp;gt; 12
  [2] =&amp;gt; 10
)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Or fetch status code indexed by id</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Fetch a column from a multi-dimensional array index by another field</span><a href='http://php.net/manual/en/function.array-column.php'>array_column() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$columns</span> = array_column(<span class="local-variable">$nestedArray</span>, ‘code’, ‘id’);
<span class="predefined">print_r</span>(<span class="local-variable">$columns</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Array
(
  [145] =&amp;gt; 12
  [20098] =&amp;gt; 12
  [34] =&amp;gt; 10
)
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>deprecated</em></strong></p>

<p>The following mcrypt functions have been deprecated <a href="http://php.net/manual/en/function.mcrypt-ecb.php">mcrypt_ecb()</a>, <a href="http://php.net/manual/en/function.mcrypt-cbc.php">mcrypt_cbc()</a>, <a href="http://php.net/manual/en/function.mcrypt-cfb.php">mcrypt_cfb()</a>, <a href="http://php.net/manual/en/function.mcrypt-ofb.php">mcrypt_ofb()</a> and will now throw <a href="http://php.net/manual/en/errorfunc.constants.php">E_DEPRECATED</a>.</p>

<p>The mysql extension has finally been deprecated, and deprecation warnings will be generated when connections are established to databases via <a href="http://php.net/manual/en/function.mysql-connect.php">mysql_connect()</a>, <a href="http://php.net/manual/en/function.mysql-pconnect.php">mysql_pconnect()</a></p>

<p>use <a href="http://php.net/manual/en/book.mysqli.php">MySQLi</a> or <a href="http://php.net/manual/en/ref.pdo-mysql.php">PDO_MySQL</a> extensions instead.</p>

<p><strong><em>removed</em></strong></p>

<p>The following (not so useful) functions have been removed from the core <a href="http://php.net/manual/en/function.php-logo-guid.php">php_logo_guid()</a>, php_egg_logo_guid(), php_real_logo_guid(), <a href="http://www.php.net/manual/en/function.zend-logo-guid.php">zend_logo_guid()</a>. And support for the ancient operating systems Windows XP and 2003 has been dropped!</p>

<p><strong><em>Install 5.5 on Ubuntu (experimental)</em></strong></p>

<p>If you want to experience the new version first hand and you work on <a href="http://www.ubuntu.com/">Ubuntu</a>. You can add the experimental PPA and give it a shot.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sudo add-apt-repository ppa:ondrej/php5-experimental
sudo apt-get update
sudo apt-get install php5
</pre></div>
</div>
 </figure></notextile></div></p>

]]></content>
  </entry>
  
</feed>
