<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Thijs Lensselink's Blog]]></title>
  <link href="http://blog.lenss.nl/tag/code/atom.xml" rel="self"/>
  <link href="http://blog.lenss.nl/"/>
  <updated>2015-05-06T13:33:29+02:00</updated>
  <id>http://blog.lenss.nl/</id>
  <author>
    <name><![CDATA[Thijs Lensselink]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git shell tools]]></title>
    <link href="http://blog.lenss.nl/2015/05/git-shell-tools/"/>
    <updated>2015-05-06T15:26:04+02:00</updated>
    <id>http://blog.lenss.nl/2015/05/git-shell-tools</id>
    <content type="html"><![CDATA[<p>Although i work in a nice and fancy IDE with all bells and whistles i ever need. I still do a lot of my day to day work in a shell. One of those things is working with Git. </p>

<p>To make git more fun to work with on the command-line. There are a couple of things i did.</p>

<p>Let’s start with auto-complete. It’s great to be able to tab complete branch names, remote files and tree and file paths. To make this happen we only need to download the following bash script from the people at Github.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ cd ~/bin
$ wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
</pre></div>
</div>
 </figure></notextile></div></p>

<p>And to make this work in your shell add this to your .bashrc or .bash_profile</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ vi .bash_profile
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>git-completion </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
if [ -f ~/bin/git-completion.bash ]; then
    source ~/bin/git-completion.bash
fi
</pre></div>
</div>
 </figure></notextile></div></p>

<p>The only thing we need to do to make TAB completion work is reload the bash profile. We can do this by sourcing the file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ source ~/.bash_profile
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Another fancy addition to working with git in a shell environment is something my coworkers showed me. It’s called the git-prompt. And is also created by the people at Github.</p>

<p>This script will do a couple of things. One of them is displaying which the current working branch is. More visible enhancements are possible by populating certain variables. </p>

<p><strong>GIT_PS1_SHOWDIRTYSTATE</strong>
Use the ‘*’ and ‘+’ characters to display unstaged and staged changes</p>

<p><strong>GIT_PS1_SHOWSTASHSTATE</strong>
Use ‘$’ to display stashed changes</p>

<p><strong>GIT_PS1_SHOWUNTRACKEDFILES</strong>
Will use ‘%’ to display there are untracked files</p>

<p>And more settings are possible. Check the readme at the beginning of the script for this. But what the script actually does is use the shells PS1 variable to display previously mentioned visible enhancements.</p>

<p>So let’s start by fetching the actual script</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ cd ~/bin
$ wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now that we have the script in place. Lets update the bash profile</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>git-prompt </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
if [ -f ~/bin/git-prompt.sh ]; then
   source ~/bin/git-prompt.sh
   GIT_PS1_SHOWDIRTYSTATE=true
   GIT_PS1_SHOWCOLORHINTS=true
   GIT_PS1_UNTRACKEDFILES=true
   export PS1=’[\e[31;1m]\u[\e[0m][\e[37;1m]@[\e[0m][\e[36;1m]\h[\e[0m]$(__git_ps1 “ [\e[32;1m][%s][\e[0m]”) [\e[37;1m]$[\e[0m] ‘ 
fi
</pre></div>
</div>
 </figure></notextile></div></p>

<p>In this case my PS1 is a bit more fancy because of the added colors. But the magic comes from adding</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>__git_ps1 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
$(__git_ps1 “[%s]”)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>When the profile is sourced once again. You can see what happens when we move to a repository</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ cd path/to/git/repository
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>PS1 </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
username@hostname [branch-name *] $
</pre></div>
</div>
 </figure></notextile></div></p>

<p>The scripts used in this post can be found in this repository https://github.com/git/git/tree/master/contrib/completion</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Composer on Git clone]]></title>
    <link href="http://blog.lenss.nl/2015/02/composer-install-on-git-clone/"/>
    <updated>2015-02-27T12:46:22+01:00</updated>
    <id>http://blog.lenss.nl/2015/02/composer-install-on-git-clone</id>
    <content type="html"><![CDATA[<p>I work on a couple of projects that use <a href="https://getcomposer.org/">Composer</a> to manage the dependencies. And a coworker asked if it was possible to automate running <code>composer install</code> after cloning a repo. It sounded like a good idea. As i sometimes forget to run the command myself. So i did some research. And it turned out to be quite easy.</p>

<p>To makee this work we will be using <a href="http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Git hooks</a> together with Git templates.</p>

<p>So we start by creating a templates folder for git. Where does not matter.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ mkdir -p [full path]/git-templates/hooks
</pre></div>
</div>
 </figure></notextile></div></p>

<p>When that’s done. we need to tell git to use the template folder on each clone / checkout. We can do this by setting a global alias for clone</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git config –global alias.clone ‘clone –template=[full path]/git-templates’
</pre></div>
</div>
 </figure></notextile></div></p>

<p>You can also do this by manually editing the .gitconfig file</p>

<p><blockquote><p>[alias]<br/>	clone = clone –template=[full path]/git-templates</p></blockquote></p>

<p>So now we have a template folder that’s read on every clone / checkout. We only need to create the hook script that triggers composer.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ vi [full path]/hooks/post-checkout
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>composer_run </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
#! /bin/bash
# Check if a composer.json file is present
function composer_run() {
    REPO=$(readlink -m $(dirname .))
    if [ -f $REPO/composer.json ]; then
        composer install
    fi
}&lt;/p&gt;

&lt;p&gt;composer_run
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Finally wer need to make it executable</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ chmod +x [full path]/hooks/post-checkout
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Let’s test it by cloning a test repo</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git clone git@github.host.tld:user/composer-hook.git foo
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Cloning into foo…<br/>remote: Counting objects: 21, done.<br/>remote: Compressing objects: 100% (15/15), done.<br/>remote: Total 21 (delta 5), reused 14 (delta 1)<br/>Receiving objects: 100% (21/21), done.<br/>Resolving deltas: 100% (5/5), done.<br/>Loading composer repositories with package information<br/>Installing dependencies (including require-dev)<br/>  - Installing psr/log (1.0.0)<br/>    Loading from cache</p></p><p><ul><br/>  <li>Installing monolog/monolog (1.12.0)<br/>Loading from cache</li><br/></ul></p><p><p>…</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get the first weekday of the month in PHP]]></title>
    <link href="http://blog.lenss.nl/2013/11/first-weekday-of-month-in-php/"/>
    <updated>2013-11-15T11:05:53+01:00</updated>
    <id>http://blog.lenss.nl/2013/11/first-weekday-of-month-in-php</id>
    <content type="html"><![CDATA[<p>A simple method to return the first weekdsay of a given month and year</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>getFirstWeekdayInMonth </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
private function _getFirstWeekdayInMonth($month, $year, $day = 1) 
{
    $dateData = getdate(mktime(null, null, null, $month, $day, $year));
    if (in_array($dateData[‘wday’], range(1, 5))) {
        return $dateData[‘mday’];
    }
    return $this-<span class="entity">&amp;gt;</span>_getFirstWeekdayInMonth($month, $year, ($day+1));
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>$wday = $this-<span class="entity">&amp;gt;</span>_getFirstWeekdayInMonth(11, 2013);
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming a folder in git that contains submodules]]></title>
    <link href="http://blog.lenss.nl/2013/10/git-move-folder-containing-submodules/"/>
    <updated>2013-10-23T13:05:12+02:00</updated>
    <id>http://blog.lenss.nl/2013/10/git-move-folder-containing-submodules</id>
    <content type="html"><![CDATA[<p>Because of some project structure changes. It was required to renamed some folders. In git this should be as easy as running <strong>git mv</strong>. But when the folders you are trying to move contain submodules. Its a whole different story.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git mv old/ new
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>fatal: source directory is empty, source=old/cookbooks/apache2, destination=new/cookbooks/apache2</p></blockquote></p>

<p>Like i said. This seems to work for normal folders. But submodules are a bit more complicated because of paths set in various files. So let’s try just moving them on the filesystem.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ mv old/ new
$ git status
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>#	deleted:    old/VVagrantfile.example<br/>#	deleted:    old/cookbooks/apache2<br/>#	deleted:    old/cookbooks/apt<br/>#	deleted:    old/cookbooks/beanstalkd/.travis.yml</p></blockquote></p>

<p>That’s not what we’re looking for. We want to move the files. Not remove them. At this point i was at a loss and spend some time looking around <a href="http://stackoverflow.com/">stackoverflow</a>. Which has multiple solutions available from other developers. But none seemed to fit the bill. So i ended up combining a couple.</p>

<p>First create the new location and add it to the git index.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ mkdir new
$ git add new
</pre></div>
</div>
 </figure></notextile></div></p>

<p>In my case i had normal folders and submodules in the same directory. So first i moved the normal folders to the new structure.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git mv old/[some folder] /new
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now it’s time for the submodules. We need to update the paths in each submodule’s <strong>.git</strong> file. And the paths in project <strong>.gitmodule</strong> file</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ find . -name .git -type f -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
$ find . -name .gitmodule -type f -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
</pre></div>
</div>
 </figure></notextile></div></p>

<p>After that add the <strong>.gitmodule</strong> file to the git index and checkout the status</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git add .gitmodule
$ git status 
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>fatal: Could not chdir to ‘../../../../../new/cookbooks/apache2’: No such file or directory<br/>fatal: ‘git status –porcelain’ failed in submodule old/cookbooks/apache2</p></blockquote></p>

<p>So we’re not there yet. As it turns out the git config file also contains the submodule paths. And the <strong>.git/modules</strong> folder contains a submodule mapping as well. So let’s fix that</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ find . -name config -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
$ mv .git/modules/old .git/modules/new
$ git status
</pre></div>
</div>
 </figure></notextile></div></p>

<p>That looks good</p>

<p><blockquote><p>modified:   .gitmodules<br/>#	renamed:    old/Vagrantfile.example -&gt; new/Vagrantfile.example<br/>#	renamed:    old/cookbooks/apache2 -&gt; new/cookbooks/apache2<br/>#	renamed:    old/cookbooks/apt -&gt; new/cookbooks/apt<br/>#	renamed:    old/cookbooks/beanstalkd/.travis.yml -&gt; new/cookbooks/beanstalkd/.travis.yml</p></blockquote></p>

<p>Now we can remove the old folder from the git project and commit the changes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git rm -r –cached old/
$ git commit -a -m “Moved old to new folder”
$ git push
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing the clover forcast for PHP projects in Jenkins]]></title>
    <link href="http://blog.lenss.nl/2013/10/clover-forcast-for-php-in-jenkins/"/>
    <updated>2013-10-15T12:26:23+02:00</updated>
    <id>http://blog.lenss.nl/2013/10/clover-forcast-for-php-in-jenkins</id>
    <content type="html"><![CDATA[<p>I had the opportunity to play with <a href="http://jenkins-ci.org/">Jenkins</a> again last week. And the setup for our projects went pretty smooth. But the fact that no matter what i tried. The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Clover+PHP+Plugin">clover</a> forecast icon would always show up as rainy <a href="/images/20013/10/health-20to39.png"><img src="/images/2013/10/health-20to39.png" alt="" /></a>. While the build was succeeding without issues. So i spend some time googling and trying out multiple “fixes”. Of which none seemed to actually work. I even reverted back to using the Jenkins clover plugins instead of Clover for PHP. No difference at all.</p>

<p>It seemed as if the settings from the config page were completely ignored when calculating the clover status. This was really bugging me. So i checked out the clover plugin source from <a href="https://github.com/jenkinsci/cloverphp-plugin">github</a>. And browsed through the code for a while. When i found the beauty below inside <strong>CoverageTarget.java</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="directive">public</span> <span class="predefined-type">Set</span>&lt;coveragemetric&gt; getFailingMetrics(AbstractClassMetrics coverage) {
    <span class="predefined-type">Set</span>&lt;coveragemetric&gt; result = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;coveragemetric&gt;();&lt;/coveragemetric&gt;&lt;/coveragemetric&gt;&lt;/coveragemetric&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (methodCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getMethodCoverage().getPercentage() &amp;lt; methodCoverage) {
    result.add(CoverageMetric.METHOD);
}

<span class="keyword">if</span> (statementCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getStatementCoverage().getPercentage() &amp;lt; statementCoverage) {
    result.add(CoverageMetric.STATEMENT);
}

<span class="keyword">if</span> (elementCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getElementCoverage().getPercentage() &amp;lt; elementCoverage) {
    result.add(CoverageMetric.ELEMENT);
}

<span class="keyword">return</span> result; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>So it seems as if somewhere in the plugin it’s actually calculating the average of the coverage per setting. The strange thing in the method above however is the <strong>elementCoverage</strong> setting. Which is not available in the Jenkins config interface. And causes issues because we have no influence over this setting.</p>

<p>So i added the setting to the config manually</p>

<p><blockquote><p>$ vi /var/lib/jenkins/jobs/[project]/config.xml</p></blockquote></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;org.jenkinsci.plugins.cloverphp.cloverphppublisher</span> <span class="attribute-name">plugin</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">cloverphp@0.3.3</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
...
      <span class="tag">&lt;healthytarget&gt;</span>
        <span class="tag">&lt;methodcoverage&gt;</span>20<span class="tag">&lt;/methodcoverage&gt;</span>
        <span class="tag">&lt;statementcoverage&gt;</span>20<span class="tag">&lt;/statementcoverage&gt;</span>
        <span class="tag">&lt;elementcoverage&gt;</span>20<span class="tag">&lt;/elementcoverage&gt;</span>
      <span class="tag">&lt;/healthytarget&gt;</span>
...
<span class="tag">&lt;/org.jenkinsci.plugins.cloverphp.cloverphppublisher&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>And voilà. I nice sunny <a href="/images/20013/10/health-80plus.png"><img src="/images/2013/10/health-80plus.png" alt="" /></a> forecast. Now let’s see if i have some time to write a patch for this.</p>
]]></content>
  </entry>
  
</feed>
