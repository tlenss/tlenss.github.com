<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Thijs Lensselink's Blog]]></title>
  <link href="http://lenss.nl/tag/code/atom.xml" rel="self"/>
  <link href="http://lenss.nl/"/>
  <updated>2013-10-15T10:38:21+02:00</updated>
  <id>http://lenss.nl/</id>
  <author>
    <name><![CDATA[Thijs Lensselink]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing the clover forcast for PHP projects in Jenkins]]></title>
    <link href="http://lenss.nl/2013/10/clover-forcast-for-php-in-jenkins/"/>
    <updated>2013-10-15T12:26:23+02:00</updated>
    <id>http://lenss.nl/2013/10/clover-forcast-for-php-in-jenkins</id>
    <content type="html"><![CDATA[<p>I had the opportunity to play with <a href="http://jenkins-ci.org/">Jenkins</a> again last week. And the setup for our projects went pretty smooth. But the fact that no matter what i tried. The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Clover+PHP+Plugin">clover</a> forecast icon would always show up as rainy <a href="http://lenss.nl/images/20013/10/health-20to39.png"><img src="http://lenss.nl/images/20013/10/health-20to39.png" alt="" /></a>. While the build was succeeding without issues. So i spend some time googling and trying out multiple “fixes”. Of which none seemed to actually work. I even reverted back to using the Jenkins clover plugins instead of Clover for PHP. No difference at all.</p>

<p>It seemed as if the settings from the config page were completely ignored when calculating the clover status. This was really bugging me. So i checked out the clover plugin source from <a href="https://github.com/jenkinsci/cloverphp-plugin">github</a>. And browsed through the code for a while. When i found the beauty below inside CoverageTarget.java</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="directive">public</span> <span class="predefined-type">Set</span>&lt;coveragemetric&gt; getFailingMetrics(AbstractClassMetrics coverage) {
    <span class="predefined-type">Set</span>&lt;coveragemetric&gt; result = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;coveragemetric&gt;();&lt;/coveragemetric&gt;&lt;/coveragemetric&gt;&lt;/coveragemetric&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (methodCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getMethodCoverage().getPercentage() &amp;lt; methodCoverage) {
    result.add(CoverageMetric.METHOD);
}

<span class="keyword">if</span> (statementCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getStatementCoverage().getPercentage() &amp;lt; statementCoverage) {
    result.add(CoverageMetric.STATEMENT);
}

<span class="keyword">if</span> (elementCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getElementCoverage().getPercentage() &amp;lt; elementCoverage) {
    result.add(CoverageMetric.ELEMENT);
}

<span class="keyword">return</span> result; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>So it seems as if somewhere in the plugin it’s actually calculating the average of the coverage per setting. The strange thing in the method above however is the elementCoverage coverage setting. Which is not available in the Jenkins config interface.</p>

<p>So i added the setting to the config manually</p>

<p><blockquote><p>$ vi /var/lib/jenkins/jobs/[project]/config.xml</p></blockquote></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;org.jenkinsci.plugins.cloverphp.cloverphppublisher</span> <span class="attribute-name">plugin</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">cloverphp@0.3.3</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
...
      <span class="tag">&lt;healthytarget&gt;</span>
        <span class="tag">&lt;methodcoverage&gt;</span>20<span class="tag">&lt;/methodcoverage&gt;</span>
        <span class="tag">&lt;statementcoverage&gt;</span>20<span class="tag">&lt;/statementcoverage&gt;</span>
        <span class="tag">&lt;elementcoverage&gt;</span>20<span class="tag">&lt;/elementcoverage&gt;</span>
      <span class="tag">&lt;/healthytarget&gt;</span>
...
<span class="tag">&lt;/org.jenkinsci.plugins.cloverphp.cloverphppublisher&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>And voilà. I nice sunny <a href="http://lenss.nl/images/20013/10/health-80plus.png"><img src="http://lenss.nl/images/20013/10/health-80plus.png" alt="" /></a> forecast. Now let’s see if i have some time to write a patch for this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github, SSH and multiple repositories]]></title>
    <link href="http://lenss.nl/2013/08/github-and-multiple-ssh-keys/"/>
    <updated>2013-08-22T00:02:09+02:00</updated>
    <id>http://lenss.nl/2013/08/github-and-multiple-ssh-keys</id>
    <content type="html"><![CDATA[<p>When working with <a href="http://github.com">Github</a>. Setting up SSH key based authentication is easy. You just create a key. Add the public key in the admin panel and voilà. If a new contributor joins your team. You add his / her key and they also have access.</p>

<p>But how does it work when you have need access to multiple repositories using multiple keys yourself? I had to set this up a couple of times. And it turns out to be just as easy. But if for some reason it’s not that obvious these steps might help.</p>

<p>Let’s pretend we need some key first.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ ssh-keygen -t rsa -b 4096
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Generating public/private rsa key pair.<br/>Enter file in which to save the key (/home/user/.ssh/id_rsa): repo1_rsa<br/>Enter passphrase (empty for no passphrase):<br/>Enter same passphrase again:</p></p><p><p>Your identification has been saved in repo1_rsa.<br/>Your public key has been saved in repo1_rsa.pub.<br/>The key fingerprint is:<br/>03:b5:da:08:3b:6f:9a:29:3f:f5:4c:ee:5d:14:cb:41 user@host<br/>The key’s randomart image is:<br/>+–[ RSA 4096]—-+<br/>   some output<br/>+—————–+</p></blockquote></p>

<p>This will generate the public and private key for <strong>repo1</strong>. Now repeat the same thing for <strong>repo2</strong>. Make sure the keys reside in <strong>~/.ssh</strong></p>

<p>Now let’s say we have access to two repositories under two different users / companies. We will use <strong>github.com/repo1</strong> and <strong>github.com/repo2</strong> as examples. The only thing we have to do is add some entries to <strong>~/.ssh/config</strong> to make this work. They key is to use the Github sub-domain mappings</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ vi ~/.ssh/config
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Host    repo1.github.com<br/>    HostName github.com<br/>    PreferredAuthentications publickey<br/>    IdentityFile	~/.ssh/repo1_rsa</p></p><p><p>Host    repo2.github.com<br/>    HostName github.com<br/>    PreferredAuthentications publickey<br/>    IdentityFile	~/.ssh/repo2_rsa</p></blockquote></p>

<p>Save the file and we’re done. Now to checkout a project in one of the repositories. Do the following.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git clone git@repo1.github.com:repo1/project.git
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Cloning into ‘project’…<br/>remote: Counting objects: 86, done.<br/>remote: Compressing objects: 100% (66/66), done.<br/>remote: Total 86 (delta 27), reused 64 (delta 17)<br/>Receiving objects: 100% (86/86), 34.83 KiB, done.<br/>Resolving deltas: 100% (27/27), done.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory exhaust issue PHP and APM]]></title>
    <link href="http://lenss.nl/2013/07/memory-exhaust-issue-PHP-and-APM/"/>
    <updated>2013-07-03T11:57:43+02:00</updated>
    <id>http://lenss.nl/2013/07/memory-exhaust-issue-PHP-and-APM</id>
    <content type="html"><![CDATA[<p>A while back i wrote a small data aggregator that would do some background processing and populate a database with it’s calculated results. The main reason to implement this was that running the queries in real-time on the production server was causing memory exhaust issues. Once the new feature was done and deployed. We quickly noticed we were running into the same kind of issues again. And the script would halt almost each time it was executed.</p>

<p><blockquote><p>Fatal error: Allowed memory size of xxxxxxxxx bytes exhausted (tried toallocate xxxxx bytes) in</p></blockquote></p>

<p>After some hacking and optimization tricks. The script’s memory consumption seemed stable enough to deploy it to production. However. Each time we deployed it. We were hit by memory exhaust issues almost instantly. Time to do some debugging and code tracing.</p>

<p>And we’re able to narrow it down to a single mysql<em>* (don’t get me started on the mysql</em>* functions, so let’s ignore that for now) call. Namely  <a href="http://php.net/manual/en/function.mysql-fetch-field.php">mysql_fetch_field</a>. Why on earth would this generate a memory exhaust issue on the server you might think. And that’s exactly what we were thinking. </p>

<p>The problem was. That the offset passed in as the field offset was incorrect. And resulted in a notice. These notices however were suppressed with the @ symbol. And therefor never noticeable during development. But that’s no reason for memory exhaust issues… right?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
@mysql_fetch_field($result, $offset);
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Right! Further inspection showed that in production PHP’s <a href="http://code.google.com/p/peclapm/">APM</a> extension was loaded and active. And this was the real problem behind the memory exhaust issue. Thousands of queries were executed. And almost all of them were throwing an error notice for the fetch field function. Which was ignored by the @ symbol. But APM was still logging them. And apparently had a very hard time keeping up. </p>

<p>It looks like a bug in APM. But that’s another story. The issue was fixed by passing in the correct offset of course. Another nice example of logging bringing down a production server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP 5.5.0 released]]></title>
    <link href="http://lenss.nl/2013/06/php-55-released/"/>
    <updated>2013-06-22T21:56:12+02:00</updated>
    <id>http://lenss.nl/2013/06/php-55-released</id>
    <content type="html"><![CDATA[<p>PHP reached a new milestone 3 days ago. And as always it’s quite exciting news. Some of the new features are already outlined by Evert Pot’s post which you can find <a href="http://evertpot.com/php-55-released/">here</a>. And all of this of course can be found on the <a href="https://wiki.php.net/rfc">wiki</a> and in the <a href="http://php.net/ChangeLog-5.php#5.5.0">change log</a>. </p>

<p>I’ll just outline some of the new and exiting features, deprecated notices and removed functions.</p>

<p><strong><em>Simplified password hashing API</em></strong></p>

<p>Hashing passwords with <a href="http://php.net/manual/en/function.md5.php">md5()</a> and <a href="http://php.net/manual/en/function.sha1.php">sha1()</a> just isn’t enough anymore. So a new, secure and easy way to hash passwords has been added. And besides hashing includes some other useful functions.</p>

<p><strong><em>$password</em></strong> The password string to hash</p>

<p><strong><em>$algorithm</em></strong> The hashing algorithm to use of which two are available at the moment</p>

<p><blockquote><p>PASSWORD_DEFAULT which uses bcrypt<br/>PASSWORD_BCRYPT which uses blowfish</p></blockquote></p>

<p><strong><em>$options</em></strong> makes it possible to add a salt or set the cost for the hashing algorithm</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Hash password with default algorithm</span><a href='http://php.net/manual/en/function.password-hash.php'>password_hash() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$password</span> = ‘test-password’;
<span class="local-variable">$hash</span> = password_hash(<span class="local-variable">$password</span>, <span class="constant">PASSWORD_DEFAULT</span>);
<span class="predefined">var_dump</span>(<span class="local-variable">$hash</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
string(60) “$2y$10$qGv1q5nT4F7HCtKSPPME2usrdJRcRpk9lEUMQsE8mqyDIy3fbJ4I.”
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Hash password with BLOWFISH algorithm</span><a href='http://php.net/manual/en/function.password-hash.php'>password_hash() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$hash</span> = password_hash(<span class="local-variable">$password</span>, <span class="constant">PASSWORD_BCRYPT</span>);
<span class="predefined">var_dump</span>(<span class="local-variable">$hash</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
string(60) “$2y$10$XtpNO/tFjtkq4u3ghcpqXeSwbHZxDQDTXRHfWBnZsmowUVl/MQys2”
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Hash password with BLOWFISH algorithm and options</span><a href='http://php.net/manual/en/function.password-hash.php'>password_hash() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$salt</span> = mcrypt_create_iv(<span class="integer">22</span>, <span class="constant">MCRYPT_DEV_URANDOM</span>); 
<span class="local-variable">$hash</span> = password_hash(<span class="local-variable">$password</span>, <span class="constant">PASSWORD_BCRYPT</span>, <span class="predefined">array</span>(“cost” =&amp;gt; <span class="integer">14</span>, “salt” =&amp;gt; <span class="local-variable">$salt</span>));
<span class="predefined">var_dump</span>(<span class="local-variable">$hash</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
string(60) “$2y$14$6ZtnYJ0CyqCUx.vJu3MZEuUGgIN.ryxMa0Yh8BnCrbBDVnd3Me30i”
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Verify if a hash and password match. Return true if they do and false if they don’t</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Verify hash</span><a href='http://php.net/manual/en/function.password-verify.php'>password_verify() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
$hash = password_hash($password, PASSWORD_DEFAULT);<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>if (password_verify($password, $hash)) {
  echo ‘Password is correct’;
} else {
  echo ‘Password is incorrect’;
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Password is correct
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Get information about a valid hash created with password_hash(). The function returns an array with the use d algorithm and options</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Retrieve $hash information</span><a href='http://php.net/manual/en/function.password-get-info.php'>password_get_info() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$info</span> = password_get_info(<span class="local-variable">$hash</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
array(3) {
  [“algo”]=&amp;gt;
  int(1)
  [“algoName”]=&amp;gt;
  string(6) “bcrypt”
  [“options”]=&amp;gt;
  array(1) {
    [“cost”]=&amp;gt;
    int(10)
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Check if the supplied hash was generated by the provided algorithm and options. This might come in handy when the hash needs to be updated</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Check if a $hash needs to be rehashed</span><a href='http://php.net/manual/en/function.password-needs-rehash.php'>password_needs_rehash() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">if</span> (password_needs_rehash(<span class="local-variable">$hash</span>, <span class="constant">PASSWORD_BCRYPT</span>, <span class="predefined">array</span>(‘cost’ =&amp;gt; <span class="integer">8</span>))) {
  <span class="comment">// Update the password hash</span>
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Support for constant array/string dereferencing</em></strong></p>

<p>If you work with objects you might have worked with object dereferencing. This Is used to chain method calls. Or the so called fluent interfaces</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Dereference object call </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$obj</span>-&amp;gt;method()-&amp;gt;returnObjMethod();
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now the same is possible for arrays and strings</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Dereference strings / array </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
echo array(1, 2, 3)[0]; //output 1
echo “foobar”[2]; //output o
echo “foobar”[“foo”][0] // output f<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>echo [1,3,4][2]; //output 4
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Class Name Resolution As Scalar Via “class” Keyword</em></strong></p>

<p>An easy way to get the full class name </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Class name resolution via ::class </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
namespace Vodka\Crypt;<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>Class HashBuilder {}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>use Vodka\Crypt\HashBuilder;<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>var_dump(HashBuilder::class);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
string(23) “Vodka\Crypt\HashBuilder”
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Support for using empty() on the result of function calls and other expressions</em></strong></p>

<p>Normally <a href="http://php.net/manual/en/function.empty.php">empty()</a> and <a href="http://php.net/manual/en/function.isset.php">isset()</a> could only be used on variables. In 5.5 it’s possible to test expression and return values from functions</p>

<p><strong><em>5.3</em></strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Call empty() with closure </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="predefined">var_dump</span>( <span class="predefined">empty</span>(<span class="keyword">function</span>() {}) );
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>PHP Parse error:  syntax error, unexpected T_FUNCTION in</p></blockquote></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Call empty() with function return value </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>        
<span class="keyword">function</span> <span class="function">foo</span>() {}
<span class="predefined">var_dump</span>(<span class="predefined">empty</span>(foo()));
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>PHP Fatal error:  Can’t use function return value in write context in</p></blockquote></p>

<p><strong><em>5.5</em></strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Call empty() with function return value </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
function foo($val) { 
  return $val; 
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>var_dump( empty(foo([])) );
var_dump( empty(foo(true)) );
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
bool(true)
bool(false)
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Support for list in foreach</em></strong></p>

<p>List has been added for foreach loops. Great for eliminating unused variables.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Support for list in foreach </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
$messages = array(
  array(‘id’ =<span class="entity">&amp;gt;</span> 1, ‘body’ =<span class="entity">&amp;gt;</span> ‘test-1’, ‘code’ =<span class="entity">&amp;gt;</span> 12),
  array(‘id’ =<span class="entity">&amp;gt;</span> 2, ‘body’ =<span class="entity">&amp;gt;</span> ‘test-2’, ‘code’ =<span class="entity">&amp;gt;</span> 12),
  array(‘id’ =<span class="entity">&amp;gt;</span> 3, ‘body’ =<span class="entity">&amp;gt;</span> ‘test-3’, ‘code’ =<span class="entity">&amp;gt;</span> 10)
);<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// Before
foreach ($messages as $message) {
  list($id, $body) = $message;
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>// After
foreach ($messages as list($id, $body)) {}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>Zend Opcache extension and enable building it by default</em></strong></p>

<p>My short post about <a href="https://wiki.php.net/rfc/optimizerplus">Zend Optimizer+</a> in February this year. Kind of slipped my mind. And i was somehow under the impression <a href="http://pecl.php.net/package/APC">APC</a> would be integrated. But this of course has to be Zend Optimizer+. Finally an opcode cacher available be default. And configurable from php.ini</p>

<p><blockquote><p>[opcache]<br/>; Determines if Zend OPCache is enabled<br/>opcache.enable=0<br/>opcache.enable_cli=0</p></p><p><p>; The OPcache shared memory storage size.<br/>opcache.memory_consumption=64</p></p><p><p>; The amount of memory for interned strings in Mbytes.<br/>opcache.interned_strings_buffer=4</p></p><p><p>; Max files in OPCode cache, use a number between 200 and 100000.<br/>opcache.max_accelerated_files=2000</p></p><p><p>; The maximum percentage of “wasted” memory until a restart is scheduled.<br/>opcache.max_wasted_percentage=5</p></p><p><p>; Append current working dir to script name<br/>opcache.use_cwd=1</p></p><p><p>How often a file should be validated<br/>opcache.revalidate_freq=2</p></p><p><p>; Enables or disables file search in include_path optimization<br/>opcache.revalidate_path=0</p></p><p><p>; Drop all PHPDoc comments<br/>opcache.save_comments=1</p></blockquote></p>

<p><strong><em>array_column function which returns a column in a multidimensional array</em></strong></p>

<p>Fetching a column from a multi-dimensional array is now possible with a single function call.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Fetch a column from a multi-dimensional array</span><a href='http://php.net/manual/en/function.array-column.php'>array_column() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$nestedArray</span> = <span class="predefined">array</span>(
  <span class="predefined">array</span>(‘id’ =&amp;gt; <span class="integer">1</span>, ‘body’ =&amp;gt; ‘test-<span class="integer">1</span>’, ‘code’ =&amp;gt; <span class="integer">12</span>),
  <span class="predefined">array</span>(‘id’ =&amp;gt; <span class="integer">2</span>, ‘body’ =&amp;gt; ‘test-<span class="integer">2</span>’, ‘code’ =&amp;gt; <span class="integer">12</span>),
  <span class="predefined">array</span>(‘id’ =&amp;gt; <span class="integer">3</span>, ‘body’ =&amp;gt; ‘test-<span class="integer">3</span>’, ‘code’ =&amp;gt; <span class="integer">10</span>)
);
<span class="local-variable">$columns</span> = array_column(<span class="local-variable">$nestedArray</span>, ‘code’);
<span class="predefined">print_r</span>(<span class="local-variable">$columns</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Array
(
  [0] =&amp;gt; 12
  [1] =&amp;gt; 12
  [2] =&amp;gt; 10
)
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Or fetch status code indexed by id</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Fetch a column from a multi-dimensional array index by another field</span><a href='http://php.net/manual/en/function.array-column.php'>array_column() </a></figcaption> <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$columns</span> = array_column(<span class="local-variable">$nestedArray</span>, ‘code’, ‘id’);
<span class="predefined">print_r</span>(<span class="local-variable">$columns</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
Array
(
  [145] =&amp;gt; 12
  [20098] =&amp;gt; 12
  [34] =&amp;gt; 10
)
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>deprecated</em></strong></p>

<p>The following mcrypt functions have been deprecated <a href="http://php.net/manual/en/function.mcrypt-ecb.php">mcrypt_ecb()</a>, <a href="http://php.net/manual/en/function.mcrypt-cbc.php">mcrypt_cbc()</a>, <a href="http://php.net/manual/en/function.mcrypt-cfb.php">mcrypt_cfb()</a>, <a href="http://php.net/manual/en/function.mcrypt-ofb.php">mcrypt_ofb()</a> and will now throw <a href="http://php.net/manual/en/errorfunc.constants.php">E_DEPRECATED</a>.</p>

<p>The mysql extension has finally been deprecated, and deprecation warnings will be generated when connections are established to databases via <a href="http://php.net/manual/en/function.mysql-connect.php">mysql_connect()</a>, <a href="http://php.net/manual/en/function.mysql-pconnect.php">mysql_pconnect()</a></p>

<p>use <a href="http://php.net/manual/en/book.mysqli.php">MySQLi</a> or <a href="http://php.net/manual/en/ref.pdo-mysql.php">PDO_MySQL</a> extensions instead.</p>

<p><strong><em>removed</em></strong></p>

<p>The following (not so useful) functions have been removed from the core <a href="http://php.net/manual/en/function.php-logo-guid.php">php_logo_guid()</a>, php_egg_logo_guid(), php_real_logo_guid(), <a href="http://www.php.net/manual/en/function.zend-logo-guid.php">zend_logo_guid()</a>. And support for the ancient operating systems Windows XP and 2003 has been dropped!</p>

<p><strong><em>Install 5.5 on Ubuntu (experimental)</em></strong></p>

<p>If you want to experience the new version first hand and you work on <a href="http://www.ubuntu.com/">Ubuntu</a>. You can add the experimental PPA and give it a shot.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
sudo add-apt-repository ppa:ondrej/php5-experimental
sudo apt-get update
sudo apt-get install php5
</pre></div>
</div>
 </figure></notextile></div></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Casting weirdness with PHP]]></title>
    <link href="http://lenss.nl/2013/03/casting-weirdness-with-PHP/"/>
    <updated>2013-03-28T22:20:34+01:00</updated>
    <id>http://lenss.nl/2013/03/casting-weirdness-with-PHP</id>
    <content type="html"><![CDATA[<p>When my coworker today asked if he could cast an array to a object. I couldn’t really answer the question. Don’t think i ever done that. So let’s try. right?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Cast array to object </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
$arr = array(‘foo’ =<span class="entity">&amp;gt;</span> ‘baz’);
$obj = (object) $arr;<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>var_dump($obj);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
object(stdClass)#1 (1) {
  [“foo”]=&amp;gt;
  string(3) “baz”
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Ha that’s cool. It actually works. But wait. What happens when we use a numeric index?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Cast array to object </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
$arr = array(0 =<span class="entity">&amp;gt;</span> ‘bar’, ‘foo’ =<span class="entity">&amp;gt;</span> ‘baz’);
$obj = (object) $arr;<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>var_dump($obj);
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
object(stdClass)#1 (2) {
  [0]=&amp;gt;
  string(3) “bar”
  [“foo”]=&amp;gt;
  string(3) “baz”
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>WTF? We just created <strong><em>$obj-&gt;0</em></strong> which should not be allowed in PHP as far as i know. So let’s make sure i am not mistaking.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Assign value to numeric class property </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="local-variable">$foo</span> = <span class="keyword">new</span> <span class="predefined-constant">stdClass</span>();
<span class="local-variable">$foo</span>-&amp;gt;<span class="integer">0</span> = ‘bar’;
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>PHP Parse error:  syntax error, unexpected ‘0’ (T_LNUMBER), expecting identifier (T_STRING) or variable (T_VARIABLE) or ‘{‘ or ‘$’ in foo.php on line 5</p></blockquote></p>

<p>But casting the array didn’t complain about a thing. Can we access this property? Well! Not calling it directly. At least not that i know of. But looping over the object’s properties does seem to work. </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Loop object properties </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
// Parse error
// var_dump($obj-<span class="entity">&amp;gt;</span>0);<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>foreach ($obj as $key =<span class="entity">&amp;gt;</span> $val) {
  var_dump($key);
  var_dump($obj-<span class="entity">&amp;gt;</span>$key);
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
int(0)
PHP Notice:  Undefined property: stdClass::$0 in foo.php on line 14
NULL
string(3) “foo”
string(3) “baz”
</pre></div>
</div>
 </figure></notextile></div></p>

<p>It’s not that i was planning on ever using this. Or advising other people to use it. In the contrary. But i guess it’s not completely useless. But care is required when doing so.</p>
]]></content>
  </entry>
  
</feed>
