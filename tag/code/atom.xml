<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Thijs Lensselink's Blog]]></title>
  <link href="http://lenss.nl/tag/code/atom.xml" rel="self"/>
  <link href="http://lenss.nl/"/>
  <updated>2014-01-23T14:13:11+01:00</updated>
  <id>http://lenss.nl/</id>
  <author>
    <name><![CDATA[Thijs Lensselink]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get the first weekday of the month in PHP]]></title>
    <link href="http://lenss.nl/2013/11/first-weekday-of-month-in-php/"/>
    <updated>2013-11-15T11:05:53+01:00</updated>
    <id>http://lenss.nl/2013/11/first-weekday-of-month-in-php</id>
    <content type="html"><![CDATA[<p>A simple method to return the first weekdsay of a given month and year</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>getFirstWeekdayInMonth </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
private function _getFirstWeekdayInMonth($month, $year, $day = 1) 
{
    $dateData = getdate(mktime(null, null, null, $month, $day, $year));
    if (in_array($dateData[‘wday’], range(1, 5))) {
        return $dateData[‘mday’];
    }
    return $this-<span class="entity">&amp;gt;</span>_getFirstWeekdayInMonth($month, $year, ($day+1));
}<span class="tag">&lt;/p&gt;</span>

<span class="tag">&lt;p&gt;</span>$wday = $this-<span class="entity">&amp;gt;</span>_getFirstWeekdayInMonth(11, 2013);
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming a folder in git that contains submodules]]></title>
    <link href="http://lenss.nl/2013/10/git-move-folder-containing-submodules/"/>
    <updated>2013-10-23T13:05:12+02:00</updated>
    <id>http://lenss.nl/2013/10/git-move-folder-containing-submodules</id>
    <content type="html"><![CDATA[<p>Because of some project structure changes. It was required to renamed some folders. In git this should be as easy as running <strong>git mv</strong>. But when the folders you are trying to move contain submodules. Its a whole different story.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git mv old/ new
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>fatal: source directory is empty, source=old/cookbooks/apache2, destination=new/cookbooks/apache2</p></blockquote></p>

<p>Like i said. This seems to work for normal folders. But submodules are a bit more complicated because of paths set in various files. So let’s try just moving them on the filesystem.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ mv old/ new
$ git status
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>#	deleted:    old/VVagrantfile.example<br/>#	deleted:    old/cookbooks/apache2<br/>#	deleted:    old/cookbooks/apt<br/>#	deleted:    old/cookbooks/beanstalkd/.travis.yml</p></blockquote></p>

<p>That’s not what we’re looking for. We want to move the files. Not remove them. At this point i was at a loss and spend some time looking around <a href="http://stackoverflow.com/">stackoverflow</a>. Which has multiple solutions available from other developers. But none seemed to fit the bill. So i ended up combining a couple.</p>

<p>First create the new location and add it to the git index.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ mkdir new
$ git add new
</pre></div>
</div>
 </figure></notextile></div></p>

<p>In my case i had normal folders and submodules in the same directory. So first i moved the normal folders to the new structure.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git mv old/[some folder] /new
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now it’s time for the submodules. We need to update the paths in each submodule’s <strong>.git</strong> file. And the paths in project <strong>.gitmodule</strong> file</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ find . -name .git -type f -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
$ find . -name .gitmodule -type f -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
</pre></div>
</div>
 </figure></notextile></div></p>

<p>After that add the <strong>.gitmodule</strong> file to the git index and checkout the status</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git add .gitmodule
$ git status 
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>fatal: Could not chdir to ‘../../../../../new/cookbooks/apache2’: No such file or directory<br/>fatal: ‘git status –porcelain’ failed in submodule old/cookbooks/apache2</p></blockquote></p>

<p>So we’re not there yet. As it turns out the git config file also contains the submodule paths. And the <strong>.git/modules</strong> folder contains a submodule mapping as well. So let’s fix that</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ find . -name config -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
$ mv .git/modules/old .git/modules/new
$ git status
</pre></div>
</div>
 </figure></notextile></div></p>

<p>That looks good</p>

<p><blockquote><p>modified:   .gitmodules<br/>#	renamed:    old/Vagrantfile.example -&gt; new/Vagrantfile.example<br/>#	renamed:    old/cookbooks/apache2 -&gt; new/cookbooks/apache2<br/>#	renamed:    old/cookbooks/apt -&gt; new/cookbooks/apt<br/>#	renamed:    old/cookbooks/beanstalkd/.travis.yml -&gt; new/cookbooks/beanstalkd/.travis.yml</p></blockquote></p>

<p>Now we can remove the old folder from the git project and commit the changes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git rm -r –cached old/
$ git commit -a -m “Moved old to new folder”
$ git push
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing the clover forcast for PHP projects in Jenkins]]></title>
    <link href="http://lenss.nl/2013/10/clover-forcast-for-php-in-jenkins/"/>
    <updated>2013-10-15T12:26:23+02:00</updated>
    <id>http://lenss.nl/2013/10/clover-forcast-for-php-in-jenkins</id>
    <content type="html"><![CDATA[<p>I had the opportunity to play with <a href="http://jenkins-ci.org/">Jenkins</a> again last week. And the setup for our projects went pretty smooth. But the fact that no matter what i tried. The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Clover+PHP+Plugin">clover</a> forecast icon would always show up as rainy <a href="http://lenss.nl/images/20013/10/health-20to39.png"><img src="http://lenss.nl/images/2013/10/health-20to39.png" alt="" /></a>. While the build was succeeding without issues. So i spend some time googling and trying out multiple “fixes”. Of which none seemed to actually work. I even reverted back to using the Jenkins clover plugins instead of Clover for PHP. No difference at all.</p>

<p>It seemed as if the settings from the config page were completely ignored when calculating the clover status. This was really bugging me. So i checked out the clover plugin source from <a href="https://github.com/jenkinsci/cloverphp-plugin">github</a>. And browsed through the code for a while. When i found the beauty below inside <strong>CoverageTarget.java</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="directive">public</span> <span class="predefined-type">Set</span>&lt;coveragemetric&gt; getFailingMetrics(AbstractClassMetrics coverage) {
    <span class="predefined-type">Set</span>&lt;coveragemetric&gt; result = <span class="keyword">new</span> <span class="predefined-type">HashSet</span>&lt;coveragemetric&gt;();&lt;/coveragemetric&gt;&lt;/coveragemetric&gt;&lt;/coveragemetric&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;<span class="keyword">if</span> (methodCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getMethodCoverage().getPercentage() &amp;lt; methodCoverage) {
    result.add(CoverageMetric.METHOD);
}

<span class="keyword">if</span> (statementCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getStatementCoverage().getPercentage() &amp;lt; statementCoverage) {
    result.add(CoverageMetric.STATEMENT);
}

<span class="keyword">if</span> (elementCoverage != <span class="predefined-constant">null</span> &amp;amp;&amp;amp; coverage.getElementCoverage().getPercentage() &amp;lt; elementCoverage) {
    result.add(CoverageMetric.ELEMENT);
}

<span class="keyword">return</span> result; } </pre></div>
</div>
 </figure></notextile></div>
</code></pre>

<p>So it seems as if somewhere in the plugin it’s actually calculating the average of the coverage per setting. The strange thing in the method above however is the <strong>elementCoverage</strong> setting. Which is not available in the Jenkins config interface. And causes issues because we have no influence over this setting.</p>

<p>So i added the setting to the config manually</p>

<p><blockquote><p>$ vi /var/lib/jenkins/jobs/[project]/config.xml</p></blockquote></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
<span class="tag">&lt;org.jenkinsci.plugins.cloverphp.cloverphppublisher</span> <span class="attribute-name">plugin</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">cloverphp@0.3.3</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
...
      <span class="tag">&lt;healthytarget&gt;</span>
        <span class="tag">&lt;methodcoverage&gt;</span>20<span class="tag">&lt;/methodcoverage&gt;</span>
        <span class="tag">&lt;statementcoverage&gt;</span>20<span class="tag">&lt;/statementcoverage&gt;</span>
        <span class="tag">&lt;elementcoverage&gt;</span>20<span class="tag">&lt;/elementcoverage&gt;</span>
      <span class="tag">&lt;/healthytarget&gt;</span>
...
<span class="tag">&lt;/org.jenkinsci.plugins.cloverphp.cloverphppublisher&gt;</span>
</pre></div>
</div>
 </figure></notextile></div></p>

<p>And voilà. I nice sunny <a href="http://lenss.nl/images/20013/10/health-80plus.png"><img src="http://lenss.nl/images/2013/10/health-80plus.png" alt="" /></a> forecast. Now let’s see if i have some time to write a patch for this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github, SSH and multiple repositories]]></title>
    <link href="http://lenss.nl/2013/08/github-and-multiple-ssh-keys/"/>
    <updated>2013-08-22T00:02:09+02:00</updated>
    <id>http://lenss.nl/2013/08/github-and-multiple-ssh-keys</id>
    <content type="html"><![CDATA[<p>When working with <a href="http://github.com">Github</a>. Setting up SSH key based authentication is easy. You just create a key. Add the public key in the admin panel and voilà. If a new contributor joins your team. You add his / her key and they also have access.</p>

<p>But how does it work when you have need access to multiple repositories using multiple keys yourself? I had to set this up a couple of times. And it turns out to be just as easy. But if for some reason it’s not that obvious these steps might help.</p>

<p>Let’s pretend we need some key first.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ ssh-keygen -t rsa -b 4096
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Generating public/private rsa key pair.<br/>Enter file in which to save the key (/home/user/.ssh/id_rsa): repo1_rsa<br/>Enter passphrase (empty for no passphrase):<br/>Enter same passphrase again:</p></p><p><p>Your identification has been saved in repo1_rsa.<br/>Your public key has been saved in repo1_rsa.pub.<br/>The key fingerprint is:<br/>03:b5:da:08:3b:6f:9a:29:3f:f5:4c:ee:5d:14:cb:41 user@host<br/>The key’s randomart image is:<br/>+–[ RSA 4096]—-+<br/>   some output<br/>+—————–+</p></blockquote></p>

<p>This will generate the public and private key for <strong>repo1</strong>. Now repeat the same thing for <strong>repo2</strong>. Make sure the keys reside in <strong>~/.ssh</strong></p>

<p>Now let’s say we have access to two repositories under two different users / companies. We will use <strong>github.com/repo1</strong> and <strong>github.com/repo2</strong> as examples. The only thing we have to do is add some entries to <strong>~/.ssh/config</strong> to make this work. They key is to use the Github sub-domain mappings</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ vi ~/.ssh/config
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Host    repo1.github.com<br/>    HostName github.com<br/>    PreferredAuthentications publickey<br/>    IdentityFile	~/.ssh/repo1_rsa</p></p><p><p>Host    repo2.github.com<br/>    HostName github.com<br/>    PreferredAuthentications publickey<br/>    IdentityFile	~/.ssh/repo2_rsa</p></blockquote></p>

<p>Save the file and we’re done. Now to checkout a project in one of the repositories. Do the following.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git clone git@repo1.github.com:repo1/project.git
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Cloning into ‘project’…<br/>remote: Counting objects: 86, done.<br/>remote: Compressing objects: 100% (66/66), done.<br/>remote: Total 86 (delta 27), reused 64 (delta 17)<br/>Receiving objects: 100% (86/86), 34.83 KiB, done.<br/>Resolving deltas: 100% (27/27), done.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory exhaust issue PHP and APM]]></title>
    <link href="http://lenss.nl/2013/07/memory-exhaust-issue-PHP-and-APM/"/>
    <updated>2013-07-03T11:57:43+02:00</updated>
    <id>http://lenss.nl/2013/07/memory-exhaust-issue-PHP-and-APM</id>
    <content type="html"><![CDATA[<p>A while back i wrote a small data aggregator that would do some background processing and populate a database with it’s calculated results. The main reason to implement this was that running the queries in real-time on the production server was causing memory exhaust issues. Once the new feature was done and deployed. We quickly noticed we were running into the same kind of issues again. And the script would halt almost each time it was executed.</p>

<p><blockquote><p>Fatal error: Allowed memory size of xxxxxxxxx bytes exhausted (tried toallocate xxxxx bytes) in</p></blockquote></p>

<p>After some hacking and optimization tricks. The script’s memory consumption seemed stable enough to deploy it to production. However. Each time we deployed it. We were hit by memory exhaust issues almost instantly. Time to do some debugging and code tracing.</p>

<p>And we’re able to narrow it down to a single mysql<em>* (don’t get me started on the mysql</em>* functions, so let’s ignore that for now) call. Namely  <a href="http://php.net/manual/en/function.mysql-fetch-field.php">mysql_fetch_field</a>. Why on earth would this generate a memory exhaust issue on the server you might think. And that’s exactly what we were thinking. </p>

<p>The problem was. That the offset passed in as the field offset was incorrect. And resulted in a notice. These notices however were suppressed with the @ symbol. And therefor never noticeable during development. But that’s no reason for memory exhaust issues… right?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
@mysql_fetch_field($result, $offset);
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Right! Further inspection showed that in production PHP’s <a href="http://code.google.com/p/peclapm/">APM</a> extension was loaded and active. And this was the real problem behind the memory exhaust issue. Thousands of queries were executed. And almost all of them were throwing an error notice for the fetch field function. Which was ignored by the @ symbol. But APM was still logging them. And apparently had a very hard time keeping up. </p>

<p>It looks like a bug in APM. But that’s another story. The issue was fixed by passing in the correct offset of course. Another nice example of logging bringing down a production server.</p>
]]></content>
  </entry>
  
</feed>
