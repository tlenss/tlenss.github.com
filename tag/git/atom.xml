<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Thijs Lensselink's Blog]]></title>
  <link href="http://lenss.nl/tag/git/atom.xml" rel="self"/>
  <link href="http://lenss.nl/"/>
  <updated>2013-12-06T10:47:23+01:00</updated>
  <id>http://lenss.nl/</id>
  <author>
    <name><![CDATA[Thijs Lensselink]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Renaming a folder in git that contains submodules]]></title>
    <link href="http://lenss.nl/2013/10/git-move-folder-containing-submodules/"/>
    <updated>2013-10-23T13:05:12+02:00</updated>
    <id>http://lenss.nl/2013/10/git-move-folder-containing-submodules</id>
    <content type="html"><![CDATA[<p>Because of some project structure changes. It was required to renamed some folders. In git this should be as easy as running <strong>git mv</strong>. But when the folders you are trying to move contain submodules. Its a whole different story.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git mv old/ new
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>fatal: source directory is empty, source=old/cookbooks/apache2, destination=new/cookbooks/apache2</p></blockquote></p>

<p>Like i said. This seems to work for normal folders. But submodules are a bit more complicated because of paths set in various files. So let’s try just moving them on the filesystem.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ mv old/ new
$ git status
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>#	deleted:    old/VVagrantfile.example<br/>#	deleted:    old/cookbooks/apache2<br/>#	deleted:    old/cookbooks/apt<br/>#	deleted:    old/cookbooks/beanstalkd/.travis.yml</p></blockquote></p>

<p>That’s not what we’re looking for. We want to move the files. Not remove them. At this point i was at a loss and spend some time looking around <a href="http://stackoverflow.com/">stackoverflow</a>. Which has multiple solutions available from other developers. But none seemed to fit the bill. So i ended up combining a couple.</p>

<p>First create the new location and add it to the git index.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ mkdir new
$ git add new
</pre></div>
</div>
 </figure></notextile></div></p>

<p>In my case i had normal folders and submodules in the same directory. So first i moved the normal folders to the new structure.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git mv old/[some folder] /new
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Now it’s time for the submodules. We need to update the paths in each submodule’s <strong>.git</strong> file. And the paths in project <strong>.gitmodule</strong> file</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ find . -name .git -type f -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
$ find . -name .gitmodule -type f -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
</pre></div>
</div>
 </figure></notextile></div></p>

<p>After that add the <strong>.gitmodule</strong> file to the git index and checkout the status</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git add .gitmodule
$ git status 
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>fatal: Could not chdir to ‘../../../../../new/cookbooks/apache2’: No such file or directory<br/>fatal: ‘git status –porcelain’ failed in submodule old/cookbooks/apache2</p></blockquote></p>

<p>So we’re not there yet. As it turns out the git config file also contains the submodule paths. And the <strong>.git/modules</strong> folder contains a submodule mapping as well. So let’s fix that</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ find . -name config -print0 -type f | xargs -0 sed -i ‘s|old|new|g’
$ mv .git/modules/old .git/modules/new
$ git status
</pre></div>
</div>
 </figure></notextile></div></p>

<p>That looks good</p>

<p><blockquote><p>modified:   .gitmodules<br/>#	renamed:    old/Vagrantfile.example -&gt; new/Vagrantfile.example<br/>#	renamed:    old/cookbooks/apache2 -&gt; new/cookbooks/apache2<br/>#	renamed:    old/cookbooks/apt -&gt; new/cookbooks/apt<br/>#	renamed:    old/cookbooks/beanstalkd/.travis.yml -&gt; new/cookbooks/beanstalkd/.travis.yml</p></blockquote></p>

<p>Now we can remove the old folder from the git project and commit the changes.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git rm -r –cached old/
$ git commit -a -m “Moved old to new folder”
$ git push
</pre></div>
</div>
 </figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github, SSH and multiple repositories]]></title>
    <link href="http://lenss.nl/2013/08/github-and-multiple-ssh-keys/"/>
    <updated>2013-08-22T00:02:09+02:00</updated>
    <id>http://lenss.nl/2013/08/github-and-multiple-ssh-keys</id>
    <content type="html"><![CDATA[<p>When working with <a href="http://github.com">Github</a>. Setting up SSH key based authentication is easy. You just create a key. Add the public key in the admin panel and voilà. If a new contributor joins your team. You add his / her key and they also have access.</p>

<p>But how does it work when you have need access to multiple repositories using multiple keys yourself? I had to set this up a couple of times. And it turns out to be just as easy. But if for some reason it’s not that obvious these steps might help.</p>

<p>Let’s pretend we need some key first.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ ssh-keygen -t rsa -b 4096
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Generating public/private rsa key pair.<br/>Enter file in which to save the key (/home/user/.ssh/id_rsa): repo1_rsa<br/>Enter passphrase (empty for no passphrase):<br/>Enter same passphrase again:</p></p><p><p>Your identification has been saved in repo1_rsa.<br/>Your public key has been saved in repo1_rsa.pub.<br/>The key fingerprint is:<br/>03:b5:da:08:3b:6f:9a:29:3f:f5:4c:ee:5d:14:cb:41 user@host<br/>The key’s randomart image is:<br/>+–[ RSA 4096]—-+<br/>   some output<br/>+—————–+</p></blockquote></p>

<p>This will generate the public and private key for <strong>repo1</strong>. Now repeat the same thing for <strong>repo2</strong>. Make sure the keys reside in <strong>~/.ssh</strong></p>

<p>Now let’s say we have access to two repositories under two different users / companies. We will use <strong>github.com/repo1</strong> and <strong>github.com/repo2</strong> as examples. The only thing we have to do is add some entries to <strong>~/.ssh/config</strong> to make this work. They key is to use the Github sub-domain mappings</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ vi ~/.ssh/config
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Host    repo1.github.com<br/>    HostName github.com<br/>    PreferredAuthentications publickey<br/>    IdentityFile	~/.ssh/repo1_rsa</p></p><p><p>Host    repo2.github.com<br/>    HostName github.com<br/>    PreferredAuthentications publickey<br/>    IdentityFile	~/.ssh/repo2_rsa</p></blockquote></p>

<p>Save the file and we’re done. Now to checkout a project in one of the repositories. Do the following.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$ git clone git@repo1.github.com:repo1/project.git
</pre></div>
</div>
 </figure></notextile></div></p>

<p><blockquote><p>Cloning into ‘project’…<br/>remote: Counting objects: 86, done.<br/>remote: Compressing objects: 100% (66/66), done.<br/>remote: Total 86 (delta 27), reused 64 (delta 17)<br/>Receiving objects: 100% (86/86), 34.83 KiB, done.<br/>Resolving deltas: 100% (27/27), done.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
